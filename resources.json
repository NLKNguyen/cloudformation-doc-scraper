[
{"resource": "AWS::ApiGateway::Account", "properties": ["CloudWatchRoleArn"]},
{"resource": "AWS::EC2::Instance", "properties": ["Affinity", "AvailabilityZone", "BlockDeviceMappings", "DisableApiTermination", "EbsOptimized", "HostId", "IamInstanceProfile", "ImageId", "InstanceInitiatedShutdownBehavior", "InstanceType", "Ipv6AddressCount", "Ipv6Addresses", "KernelId", "KeyName", "Monitoring", "NetworkInterfaces", "PlacementGroupName", "PrivateIpAddress", "RamdiskId", "SecurityGroupIds", "SecurityGroups", "SourceDestCheck", "SsmAssociations", "SubnetId", "Tags", "Tenancy", "UserData", "Volumes", "AdditionalInfo", "AvailabilityZone", "PrivateDnsName", "PublicDnsName", "PrivateIp", "PublicIp"]},
{"resource": "AWS::EC2::InternetGateway", "properties": ["Tags"]},
{"resource": "AWS::EC2::FlowLog", "properties": ["DeliverLogsPermissionArn", "LogGroupName", "ResourceId", "ResourceType", "TrafficType"]},
{"resource": "AWS::EC2::NatGateway", "properties": ["AllocationId", "SubnetId"]},
{"resource": "AWS::EC2::EIP", "properties": ["InstanceId", "Domain", "AllocationId"]},
{"resource": "AWS::EC2::Host", "properties": ["AutoPlacement", "AvailabilityZone", "InstanceType"]},
{"resource": "AWS::EC2::EIPAssociation", "properties": ["AllocationId", "EIP", "InstanceId", "NetworkInterfaceId", "PrivateIpAddress"]},
{"resource": "AWS::EC2::CustomerGateway", "properties": ["BgpAsn", "IpAddress", "Tags", "Type"]},
{"resource": "AWS::DirectoryService::MicrosoftAD", "properties": ["CreateAlias", "EnableSso", "Name", "Password", "ShortName", "VpcSettings", "Alias", "DnsIpAddresses"]},
{"resource": "AWS::DirectoryService::SimpleAD", "properties": ["CreateAlias", "Description", "EnableSso", "Name", "Password", "ShortName", "Size", "VpcSettings", "Alias", "DnsIpAddresses"]},
{"resource": "AWS::EC2::DHCPOptions", "properties": ["DomainName", "DomainNameServers", "NetbiosNameServers", "NetbiosNodeType", "NtpServers", "Tags"]},
{"resource": "AWS::DynamoDB::Table", "properties": ["AttributeDefinitions", "GlobalSecondaryIndexes", "KeySchema", "LocalSecondaryIndexes", "ProvisionedThroughput", "StreamSpecification", "TableName", "StreamArn"]},
{"resource": "AWS::Config::DeliveryChannel", "properties": ["ConfigSnapshotDeliveryProperties", "Name", "S3BucketName", "S3KeyPrefix", "SnsTopicARN"]},
{"resource": "AWS::DataPipeline::Pipeline", "properties": ["Activate", "Description", "Name", "ParameterObjects", "ParameterValues", "PipelineObjects", "PipelineTags"]},
{"resource": "AWS::WorkSpaces::Workspace", "properties": ["BundleId", "DirectoryId", "UserName", "RootVolumeEncryptionEnabled", "UserVolumeEncryptionEnabled", "VolumeEncryptionKey"]},
{"resource": "AWS::WAF::XssMatchSet", "properties": ["Name", "XssMatchTuples"]},
{"resource": "AWS::WAF::WebACL", "properties": ["DefaultAction", "MetricName", "Name", "Rules"]},
{"resource": "AWS::WAF::SqlInjectionMatchSet", "properties": ["Name", "SqlInjectionMatchTuples"]},
{"resource": "AWS::WAF::SizeConstraintSet", "properties": ["Name", "SizeConstraints"]},
{"resource": "AWS::WAF::IPSet", "properties": ["IPSetDescriptors", "c-ip", "x-forwarded-for", "Name"]},
{"resource": "AWS::Config::ConfigurationRecorder", "properties": ["Name", "RecordingGroup", "RoleARN"]},
{"resource": "AWS::WAF::Rule", "properties": ["MetricName", "Name", "Predicates"]},
{"resource": "AWS::WAF::ByteMatchSet", "properties": ["ByteMatchTuples", "Name"]},
{"resource": "AWS::StepFunctions::StateMachine", "properties": ["DefinitionString", "RoleArn", "Name"]},
{"resource": "AWS::StepFunctions::Activity", "properties": ["Name", "Name"]},
{"resource": "AWS::SSM::Document", "properties": ["Content", "DocumentType"]},
{"resource": "AWS::SQS::QueuePolicy", "properties": ["PolicyDocument", "Queues"]},
{"resource": "AWS::SQS::Queue", "properties": ["ContentBasedDeduplication", "DelaySeconds", "FifoQueue", "MaximumMessageSize", "MessageRetentionPeriod", "QueueName", "ReceiveMessageWaitTimeSeconds", "RedrivePolicy", "VisibilityTimeout", "Arn", "QueueName"]},
{"resource": "AWS::SSM::Association", "properties": ["DocumentVersion", "InstanceId", "Name", "Parameters", "ScheduleExpression", "Targets"]},
{"resource": "AWS::SNS::Topic", "properties": ["DisplayName", "Subscription", "TopicName", "TopicName"]},
{"resource": "AWS::SNS::TopicPolicy", "properties": ["PolicyDocument", "Topics"]},
{"resource": "AWS::SNS::Subscription", "properties": ["Endpoint", "Protocol", "TopicArn"]},
{"resource": "AWS::SDB::Domain", "properties": ["Description"]},
{"resource": "AWS::S3::BucketPolicy", "properties": ["Bucket", "PolicyDocument"]},
{"resource": "AWS::S3::Bucket", "properties": ["AccessControl", "BucketName", "CorsConfiguration", "LifecycleConfiguration", "LoggingConfiguration", "NotificationConfiguration", "ReplicationConfiguration", "Tags", "VersioningConfiguration", "WebsiteConfiguration", "DomainName", "DualStackDomainName", "WebsiteURL"]},
{"resource": "AWS::Route53::RecordSetGroup", "properties": ["Comment", "HostedZoneId", "HostedZoneName", "RecordSets"]},
{"resource": "AWS::Route53::HealthCheck", "properties": ["HealthCheckConfig", "HealthCheckTags"]},
{"resource": "AWS::Route53::RecordSet", "properties": ["AliasTarget", "Comment", "Failover", "GeoLocation", "HealthCheckId", "HostedZoneId", "HostedZoneName", "Name", "Region", "ResourceRecords", "SetIdentifier", "TTL", "Type", "Weight"]},
{"resource": "AWS::Redshift::ClusterSecurityGroupIngress", "properties": ["ClusterSecurityGroupName", "CIDRIP", "EC2SecurityGroupName", "EC2SecurityGroupOwnerId"]},
{"resource": "AWS::Redshift::ClusterSecurityGroup", "properties": ["Description"]},
{"resource": "AWS::Route53::HostedZone", "properties": ["HostedZoneConfig", "HostedZoneTags", "Name", "VPCs", "NameServers"]},
{"resource": "AWS::Redshift::ClusterSubnetGroup", "properties": ["Description", "SubnetIds"]},
{"resource": "AWS::Redshift::ClusterParameterGroup", "properties": ["Description", "ParameterGroupFamily", "Parameters"]},
{"resource": "AWS::Redshift::Cluster", "properties": ["AllowVersionUpgrade", "AutomatedSnapshotRetentionPeriod", "AvailabilityZone", "ClusterParameterGroupName", "ClusterSecurityGroups", "ClusterSubnetGroupName", "ClusterType", "ClusterVersion", "DBName", "ElasticIp", "Encrypted", "HsmClientCertificateIdentifier", "HsmConfigurationIdentifier", "KmsKeyId", "MasterUsername", "MasterUserPassword", "NodeType", "NumberOfNodes", "OwnerAccount", "Port", "PreferredMaintenanceWindow", "PubliclyAccessible", "SnapshotClusterIdentifier", "SnapshotIdentifier", "VpcSecurityGroupIds", "Endpoint.Address", "Endpoint.Port"]},
{"resource": "AWS::RDS::EventSubscription", "properties": ["Enabled", "EventCategories", "SnsTopicArn", "SourceIds", "SourceType"]},
{"resource": "AWS::RDS::DBSubnetGroup", "properties": ["DBSubnetGroupDescription", "SubnetIds", "Tags"]},
{"resource": "AWS::RDS::DBSecurityGroupIngress", "properties": ["CIDRIP", "DBSecurityGroupName", "EC2SecurityGroupId", "EC2SecurityGroupName", "EC2SecurityGroupOwnerId"]},
{"resource": "AWS::RDS::DBSecurityGroup", "properties": ["EC2VpcId", "DBSecurityGroupIngress", "GroupDescription", "Tags"]},
{"resource": "AWS::RDS::OptionGroup", "properties": ["EngineName", "MajorEngineVersion", "OptionGroupDescription", "OptionConfigurations", "Tags"]},
{"resource": "AWS::RDS::DBParameterGroup", "properties": ["Description", "Family", "Parameters", "Tags"]},
{"resource": "AWS::RDS::DBClusterParameterGroup", "properties": ["Description", "Family", "Parameters", "Tags"]},
{"resource": "AWS::RDS::DBInstance", "properties": ["AllocatedStorage", "AllowMajorVersionUpgrade", "AutoMinorVersionUpgrade", "AvailabilityZone", "BackupRetentionPeriod", "CharacterSetName", "CopyTagsToSnapshot", "DBClusterIdentifier", "DBInstanceClass", "DBInstanceIdentifier", "DBName", "DBParameterGroupName", "DBSecurityGroups", "DBSnapshotIdentifier", "DBSubnetGroupName", "Domain", "DomainIAMRoleName", "Engine", "EngineVersion", "Iops", "KmsKeyId", "LicenseModel", "MasterUsername", "MasterUserPassword", "MonitoringInterval", "MonitoringRoleArn", "MultiAZ", "OptionGroupName", "Port", "PreferredBackupWindow", "PreferredMaintenanceWindow", "PubliclyAccessible", "SourceDBInstanceIdentifier", "StorageEncrypted", "StorageType", "Tags", "Timezone", "VPCSecurityGroups"]},
{"resource": "AWS::RDS::DBCluster", "properties": ["AvailabilityZones", "BackupRetentionPeriod", "DatabaseName", "DBClusterParameterGroupName", "DBSubnetGroupName", "Engine", "EngineVersion", "KmsKeyId", "MasterUsername", "MasterUserPassword", "Port", "PreferredBackupWindow", "PreferredMaintenanceWindow", "SnapshotIdentifier", "StorageEncrypted", "Tags", "VpcSecurityGroupIds"]},
{"resource": "AWS::OpsWorks::Volume", "properties": ["Ec2VolumeId", "MountPoint", "Name", "StackId"]},
{"resource": "AWS::OpsWorks::UserProfile", "properties": ["AllowSelfManagement", "IamUserArn", "SshPublicKey"]},
{"resource": "AWS::OpsWorks::Stack", "properties": ["AgentVersion", "Attributes", "ChefConfiguration", "CloneAppIds", "ClonePermissions", "ConfigurationManager", "CustomCookbooksSource", "CustomJson", "DefaultAvailabilityZone", "DefaultInstanceProfileArn", "DefaultOs", "DefaultRootDeviceType", "DefaultSshKeyName", "DefaultSubnetId", "EcsClusterArn", "ElasticIps", "HostnameTheme", "Name", "RdsDbInstances", "ServiceRoleArn", "SourceStackId", "UseCustomCookbooks", "UseOpsworksSecurityGroups", "VpcId"]},
{"resource": "AWS::OpsWorks::Layer", "properties": ["Attributes", "AutoAssignElasticIps", "AutoAssignPublicIps", "CustomInstanceProfileArn", "CustomJson", "CustomRecipes", "CustomSecurityGroupIds", "EnableAutoHealing", "InstallUpdatesOnBoot", "LifecycleEventConfiguration", "LoadBasedAutoScaling", "Name", "Packages", "Shortname", "StackId", "Type", "VolumeConfigurations"]},
{"resource": "AWS::OpsWorks::Instance", "properties": ["AgentVersion", "AmiId", "Architecture", "AutoScalingType", "AvailabilityZone", "BlockDeviceMappings", "EbsOptimized", "ElasticIps", "Hostname", "InstallUpdatesOnBoot", "InstanceType", "LayerIds", "Os", "RootDeviceType", "SshKeyName", "StackId", "SubnetId", "Tenancy", "TimeBasedAutoScaling", "VirtualizationType", "Volumes"]},
{"resource": "AWS::OpsWorks::App", "properties": ["AppSource", "Attributes", "Description", "DataSources", "Domains", "EnableSsl", "Environment", "Name", "Shortname", "SslConfiguration", "StackId", "Type"]},
{"resource": "AWS::OpsWorks::ElasticLoadBalancerAttachment", "properties": ["ElasticLoadBalancerName", "LayerId"]},
{"resource": "AWS::Logs::SubscriptionFilter", "properties": ["DestinationArn", "FilterPattern", "LogGroupName", "RoleArn"]},
{"resource": "AWS::Lambda::Permission", "properties": ["Action", "FunctionName", "Principal", "SourceAccount", "SourceArn"]},
{"resource": "AWS::Logs::MetricFilter", "properties": ["FilterPattern", "LogGroupName", "MetricTransformations"]},
{"resource": "AWS::Logs::LogStream", "properties": ["LogGroupName", "LogStreamName"]},
{"resource": "AWS::Lambda::Function", "properties": ["Code", "DeadLetterConfig", "Description", "Environment", "FunctionName", "Handler", "KmsKeyArn", "MemorySize", "Role", "Runtime", "Timeout", "VpcConfig", "Arn"]},
{"resource": "AWS::Logs::LogGroup", "properties": ["LogGroupName", "RetentionInDays", "Arn"]},
{"resource": "AWS::Logs::Destination", "properties": ["DestinationName", "DestinationPolicy", "RoleArn", "TargetArn"]},
{"resource": "AWS::Lambda::Version", "properties": ["CodeSha256", "Description", "FunctionName", "Version"]},
{"resource": "AWS::IoT::ThingPrincipalAttachment", "properties": ["Principal", "ThingName"]},
{"resource": "AWS::Lambda::EventSourceMapping", "properties": ["BatchSize", "Enabled", "EventSourceArn", "FunctionName", "StartingPosition"]},
{"resource": "AWS::Kinesis::Stream", "properties": ["Name", "ShardCount", "Tags", "Arn"]},
{"resource": "AWS::IoT::TopicRule", "properties": ["RuleName", "TopicRulePayload"]},
{"resource": "AWS::KMS::Key", "properties": ["Description", "Enabled", "EnableKeyRotation", "KeyPolicy", "Arn"]},
{"resource": "AWS::KinesisFirehose::DeliveryStream", "properties": ["DeliveryStreamName", "ElasticsearchDestinationConfiguration", "RedshiftDestinationConfiguration", "S3DestinationConfiguration"]},
{"resource": "AWS::KMS::Alias", "properties": ["AliasName", "TargetKeyId"]},
{"resource": "AWS::Lambda::Alias", "properties": ["Description", "FunctionName", "FunctionVersion", "Name"]},
{"resource": "AWS::IoT::PolicyPrincipalAttachment", "properties": ["PolicyName", "Principal"]},
{"resource": "AWS::IoT::Policy", "properties": ["PolicyDocument", "PolicyName"]},
{"resource": "AWS::IoT::Certificate", "properties": ["CertificateSigningRequest", "Status", "Arn"]},
{"resource": "AWS::IoT::Thing", "properties": ["AttributePayload", "ThingName"]},
{"resource": "AWS::IAM::UserToGroupAddition", "properties": ["GroupName", "Users"]},
{"resource": "AWS::IAM::Role", "properties": ["AssumeRolePolicyDocument", "ManagedPolicyArns", "Path", "Policies", "RoleName", "Arn"]},
{"resource": "AWS::IAM::User", "properties": ["Groups", "LoginProfile", "ManagedPolicyArns", "Path", "Policies", "UserName", "Arn"]},
{"resource": "AWS::IAM::Policy", "properties": ["Groups", "PolicyDocument", "PolicyName", "Roles", "Users"]},
{"resource": "AWS::IAM::ManagedPolicy", "properties": ["Description", "Groups", "Path", "PolicyDocument", "Roles", "Users"]},
{"resource": "AWS::IAM::InstanceProfile", "properties": ["Path", "Roles", "InstanceProfileName", "Arn"]},
{"resource": "AWS::IAM::Group", "properties": ["GroupName", "ManagedPolicyArns", "Path", "Policies", "Arn"]},
{"resource": "AWS::IAM::AccessKey", "properties": ["Serial", "Status", "UserName", "SecretAccessKey"]},
{"resource": "AWS::GameLift::Fleet", "properties": ["BuildId", "Description", "DesiredEC2Instances", "EC2InboundPermissions", "EC2InstanceType", "LogPaths", "MaxSize", "MinSize", "Name", "ServerLaunchParameters", "ServerLaunchPath"]},
{"resource": "AWS::GameLift::Build", "properties": ["Name", "StorageLocation", "Version"]},
{"resource": "AWS::GameLift::Alias", "properties": ["Description", "Name", "RoutingStrategy"]},
{"resource": "AWS::Events::Rule", "properties": ["Description", "EventPattern", "Name", "RoleArn", "ScheduleExpression", "State", "Targets", "Arn"]},
{"resource": "AWS::EMR::Step", "properties": ["ActionOnFailure", "HadoopJarStep", "JobFlowId", "Name"]},
{"resource": "AWS::EMR::InstanceGroupConfig", "properties": ["BidPrice", "Configurations", "EbsConfiguration", "InstanceCount", "InstanceRole", "InstanceType", "JobFlowId", "Market", "Name"]},
{"resource": "AWS::EMR::Cluster", "properties": ["AdditionalInfo", "Applications", "BootstrapActions", "Configurations", "Instances", "JobFlowRole", "LogUri", "Name", "ReleaseLabel", "ServiceRole", "Tags", "VisibleToAllUsers", "MasterPublicDNS"]},
{"resource": "AWS::Elasticsearch::Domain", "properties": ["AccessPolicies", "AdvancedOptions", "DomainName", "EBSOptions", "ElasticsearchClusterConfig", "ElasticsearchVersion", "SnapshotOptions", "Tags", "DomainArn", "DomainEndpoint"]},
{"resource": "AWS::ElasticLoadBalancingV2::TargetGroup", "properties": ["HealthCheckIntervalSeconds", "HealthCheckPath", "HealthCheckPort", "HealthCheckProtocol", "HealthCheckTimeoutSeconds", "HealthyThresholdCount", "Matcher", "Name", "Port", "Protocol", "Tags", "TargetGroupAttributes", "Targets", "UnhealthyThresholdCount", "VpcId", "LoadBalancerArns", "TargetGroupFullName"]},
{"resource": "AWS::ElasticLoadBalancingV2::LoadBalancer", "properties": ["LoadBalancerAttributes", "Name", "Scheme", "SecurityGroups", "Subnets", "Tags", "DNSName", "CanonicalHostedZoneID", "LoadBalancerFullName", "LoadBalancerName", "SecurityGroups"]},
{"resource": "AWS::ElasticLoadBalancingV2::ListenerRule", "properties": ["Actions", "Conditions", "ListenerArn", "Priority"]},
{"resource": "AWS::ElasticLoadBalancingV2::Listener", "properties": ["Certificates", "DefaultActions", "LoadBalancerArn", "Port", "Protocol", "SslPolicy"]},
{"resource": "AWS::ElasticBeanstalk::ApplicationVersion", "properties": ["ApplicationName", "Description", "SourceBundle"]},
{"resource": "AWS::ElasticLoadBalancing::LoadBalancer", "properties": ["AccessLoggingPolicy", "AppCookieStickinessPolicy", "AvailabilityZones", "ConnectionDrainingPolicy", "ConnectionSettings", "CrossZone", "HealthCheck", "Instances", "LBCookieStickinessPolicy", "LoadBalancerName", "Listeners", "Policies", "Scheme", "SecurityGroups", "Subnets", "Tags", "CanonicalHostedZoneName", "CanonicalHostedZoneNameID", "DNSName", "SourceSecurityGroup.GroupName", "SourceSecurityGroup.OwnerAlias"]},
{"resource": "AWS::ElasticBeanstalk::Application", "properties": ["ApplicationName", "Description"]},
{"resource": "AWS::ElastiCache::SecurityGroupIngress", "properties": ["CacheSecurityGroupName", "EC2SecurityGroupName", "EC2SecurityGroupOwnerId"]},
{"resource": "AWS::ElasticBeanstalk::Environment", "properties": ["ApplicationName", "CNAMEPrefix", "Description", "EnvironmentName", "OptionSettings", "SolutionStackName", "Tags", "TemplateName", "Tier", "VersionLabel", "EndpointURL"]},
{"resource": "AWS::ElasticBeanstalk::ConfigurationTemplate", "properties": ["ApplicationName", "Description", "EnvironmentId", "OptionSettings", "SolutionStackName", "SourceConfiguration"]},
{"resource": "AWS::ElastiCache::SecurityGroup", "properties": ["Description"]},
{"resource": "AWS::ElastiCache::SubnetGroup ", "properties": ["CacheSubnetGroupName", "Description", "SubnetIds"]},
{"resource": "AWS::EFS::MountTarget", "properties": ["FileSystemId", "IpAddress", "SecurityGroups", "SubnetId"]},
{"resource": "AWS::ECS::TaskDefinition", "properties": ["Volumes", "Family", "NetworkMode", "TaskRoleArn", "ContainerDefinitions"]},
{"resource": "AWS::ElastiCache::ReplicationGroup", "properties": ["AutomaticFailoverEnabled", "AutoMinorVersionUpgrade", "CacheNodeType", "CacheParameterGroupName", "CacheSecurityGroupNames", "CacheSubnetGroupName", "Engine", "EngineVersion", "NodeGroupConfiguration", "NotificationTopicArn", "NumCacheClusters", "NumNodeGroups", "Port", "PreferredCacheClusterAZs", "PreferredMaintenanceWindow", "PrimaryClusterId", "ReplicasPerNodeGroup", "ReplicationGroupDescription", "ReplicationGroupId", "SecurityGroupIds", "SnapshotArns", "SnapshotName", "SnapshotRetentionLimit", "SnapshottingClusterId", "SnapshotWindow", "Tags", "PrimaryEndPoint.Address", "PrimaryEndPoint.Port", "ReadEndPoint.Addresses", "ReadEndPoint.Ports", "ReadEndPoint.Addresses.List", "ReadEndPoint.Ports.List"]},
{"resource": "AWS::ElastiCache::CacheCluster", "properties": ["AutoMinorVersionUpgrade", "AZMode", "CacheNodeType", "CacheParameterGroupName", "CacheSecurityGroupNames", "CacheSubnetGroupName", "ClusterName", "Engine", "EngineVersion", "NotificationTopicArn", "NumCacheNodes", "Port", "PreferredAvailabilityZone", "PreferredAvailabilityZones", "PreferredMaintenanceWindow", "SnapshotArns", "SnapshotName", "SnapshotRetentionLimit", "SnapshotWindow", "Tags", "VpcSecurityGroupIds", "ConfigurationEndpoint.Address", "ConfigurationEndpoint.Port", "RedisEndpoint.Address", "RedisEndpoint.Port"]},
{"resource": "AWS::ECS::Cluster", "properties": ["ClusterName"]},
{"resource": "AWS::EFS::FileSystem", "properties": ["FileSystemTags", "PerformanceMode"]},
{"resource": "AWS::ECS::Service", "properties": ["Cluster", "DeploymentConfiguration", "DesiredCount", "LoadBalancers", "Role", "TaskDefinition", "Name"]},
{"resource": "AWS::EC2::VPNGateway", "properties": ["Type", "Tags"]},
{"resource": "AWS::EC2::VPNConnectionRoute", "properties": ["DestinationCidrBlock", "VpnConnectionId"]},
{"resource": "AWS::EC2::VPNGatewayRoutePropagation", "properties": ["RouteTableIds", "VpnGatewayId"]},
{"resource": "AWS::EC2::VPNConnection", "properties": ["Type", "CustomerGatewayId", "StaticRoutesOnly", "Tags", "VpnGatewayId"]},
{"resource": "AWS::ECR::Repository", "properties": ["RepositoryName", "RepositoryPolicyText"]},
{"resource": "AWS::EC2::VPCGatewayAttachment", "properties": ["InternetGatewayId", "VpcId", "VpnGatewayId"]},
{"resource": "AWS::EC2::VPCPeeringConnection", "properties": ["PeerVpcId", "Tags", "VpcId", "PeerOwnerId", "PeerRoleArn"]},
{"resource": "AWS::EC2::VPCCidrBlock", "properties": ["AmazonProvidedIpv6CidrBlock", "VpcId"]},
{"resource": "AWS::EC2::VPCEndpoint", "properties": ["PolicyDocument", "RouteTableIds", "ServiceName", "VpcId"]},
{"resource": "AWS::EC2::VPCDHCPOptionsAssociation", "properties": ["DhcpOptionsId", "VpcId"]},
{"resource": "AWS::EC2::VPC", "properties": ["CidrBlock", "EnableDnsSupport", "EnableDnsHostnames", "InstanceTenancy", "Tags", "CidrBlock", "DefaultNetworkAcl", "DefaultSecurityGroup", "Ipv6CidrBlocks"]},
{"resource": "AWS::EC2::VolumeAttachment", "properties": ["Device", "InstanceId", "VolumeId"]},
{"resource": "AWS::EC2::SubnetRouteTableAssociation", "properties": ["RouteTableId", "SubnetId"]},
{"resource": "AWS::EC2::Volume", "properties": ["AutoEnableIO", "AvailabilityZone", "Encrypted", "Iops", "KmsKeyId", "Size", "SnapshotId", "Tags", "VolumeType"]},
{"resource": "AWS::EC2::SubnetNetworkAclAssociation", "properties": ["SubnetId", "NetworkAclId", "AssociationId"]},
{"resource": "AWS::ElastiCache::ParameterGroup", "properties": ["CacheParameterGroupFamily", "Description", "Properties"]},
{"resource": "AWS::EC2::SubnetCidrBlock", "properties": ["Ipv6CidrBlock", "SubnetId"]},
{"resource": "AWS::EC2::SecurityGroup", "properties": ["GroupDescription", "SecurityGroupEgress", "SecurityGroupIngress", "Tags", "VpcId", "GroupId"]},
{"resource": "AWS::EC2::Subnet", "properties": ["AvailabilityZone", "CidrBlock", "MapPublicIpOnLaunch", "Tags", "VpcId", "AvailabilityZone", "Ipv6CidrBlocks"]},
{"resource": "AWS::EC2::SpotFleet", "properties": ["SpotFleetRequestConfigData"]},
{"resource": "AWS::EC2::SecurityGroupIngress", "properties": ["CidrIp", "CidrIpv6", "FromPort", "GroupId", "GroupName", "IpProtocol", "SourceSecurityGroupId", "SourceSecurityGroupName", "SourceSecurityGroupOwnerId", "ToPort"]},
{"resource": "AWS::EC2::SecurityGroupEgress", "properties": ["CidrIp", "CidrIpv6", "DestinationPrefixListId", "DestinationSecurityGroupId", "FromPort", "GroupId", "IpProtocol", "ToPort"]},
{"resource": "AWS::EC2::RouteTable", "properties": ["VpcId", "Tags"]},
{"resource": "AWS::EC2::Route", "properties": ["DestinationCidrBlock", "DestinationIpv6CidrBlock", "GatewayId", "InstanceId", "NatGatewayId", "NetworkInterfaceId", "RouteTableId", "VpcPeeringConnectionId"]},
{"resource": "AWS::EC2::PlacementGroup", "properties": ["Strategy"]},
{"resource": "AWS::EC2::NetworkInterfaceAttachment", "properties": ["DeleteOnTermination", "DeviceIndex", "InstanceId", "NetworkInterfaceId"]},
{"resource": "AWS::EC2::NetworkInterface", "properties": ["Description", "GroupSet", "Ipv6AddressCount", "Ipv6Addresses", "PrivateIpAddress", "PrivateIpAddresses", "SecondaryPrivateIpAddressCount", "SourceDestCheck", "SubnetId", "Tags", "PrimaryPrivateIpAddress", "SecondaryPrivateIpAddresses"]},
{"resource": "AWS::EC2::NetworkAclEntry", "properties": ["CidrBlock", "Egress", "Icmp", "Ipv6CidrBlock", "NetworkAclId", "PortRange", "Protocol", "RuleAction", "RuleNumber"]},
{"resource": "AWS::EC2::NetworkAcl", "properties": ["Tags", "VpcId"]},
{"resource": "AWS::Config::ConfigRule", "properties": ["ConfigRuleName", "Description", "InputParameters", "MaximumExecutionFrequency", "Scope", "Source", "Arn", "ConfigRuleId", "Compliance.Type"]},
{"resource": "AWS::CodePipeline::Pipeline", "properties": ["ArtifactStore", "DisableInboundStageTransitions", "Name", "RestartExecutionOnUpdate", "RoleArn", "Stages"]},
{"resource": "AWS::CodePipeline::CustomActionType", "properties": ["Category", "ConfigurationProperties", "InputArtifactDetails", "OutputArtifactDetails", "Provider", "Settings", "Version"]},
{"resource": "AWS::CodeDeploy::Application", "properties": ["ApplicationName"]},
{"resource": "AWS::CloudTrail::Trail", "properties": ["CloudWatchLogsLogGroupArn", "CloudWatchLogsRoleArn", "EnableLogFileValidation", "IncludeGlobalServiceEvents", "IsLogging", "IsMultiRegionTrail", "KMSKeyId", "S3BucketName", "S3KeyPrefix", "SnsTopicName", "Tags"]},
{"resource": "AWS::CloudFront::Distribution", "properties": ["DistributionConfig", "DomainName"]},
{"resource": "AWS::CodeCommit::Repository", "properties": ["RepositoryDescription", "RepositoryName", "Triggers", "Arn", "CloneUrlHttp", "CloneUrlSsh", "Name"]},
{"resource": "AWS::CodeBuild::Project", "properties": ["Artifacts", "Description", "EncryptionKey", "Environment", "Name", "ServiceRole", "Source", "Tags", "TimeoutInMinutes", "Arn"]},
{"resource": "AWS::CodeDeploy::DeploymentGroup", "properties": ["ApplicationName", "AutoScalingGroups", "Deployment", "DeploymentConfigName", "DeploymentGroupName", "Ec2TagFilters", "OnPremisesInstanceTagFilters", "ServiceRoleArn"]},
{"resource": "AWS::CodeDeploy::DeploymentConfig", "properties": ["DeploymentConfigName", "MinimumHealthyHosts"]},
{"resource": "AWS::CloudWatch::Alarm", "properties": ["ActionsEnabled", "AlarmActions", "AlarmDescription", "AlarmName", "ComparisonOperator", "Dimensions", "EvaluationPeriods", "InsufficientDataActions", "MetricName", "Namespace", "OKActions", "Period", "Statistic", "Threshold", "Unit"]},
{"resource": "AWS::CloudFormation::WaitConditionHandle", "properties": []},
{"resource": "AWS::CloudFormation::WaitCondition", "properties": ["Count", "Handle", "Timeout", "Data"]},
{"resource": "AWS::CloudFormation::Authentication", "properties": ["accessKeyId", "buckets", "password", "secretKey", "type", "uris", "username", "roleName"]},
{"resource": "AWS::CloudFormation::Interface", "properties": ["ParameterGroups", "ParameterLabels"]},
{"resource": "AWS::CertificateManager::Certificate", "properties": ["DomainName", "DomainValidationOptions", "SubjectAlternativeNames", "Tags"]},
{"resource": "AWS::CloudFormation::Stack", "properties": ["NotificationARNs", "Parameters", "Tags", "TemplateURL", "TimeoutInMinutes", "Outputs.", "NestedStackOutputName"]},
{"resource": "AWS::CloudFormation::Init", "properties": []},
{"resource": "AWS::CloudFormation::CustomResource", "properties": ["ServiceToken"]},
{"resource": "AWS::AutoScaling::ScheduledAction", "properties": ["AutoScalingGroupName", "DesiredCapacity", "EndTime", "MaxSize", "MinSize", "Recurrence", "StartTime"]},
{"resource": "AWS::AutoScaling::ScalingPolicy", "properties": ["AdjustmentType", "AutoScalingGroupName", "Cooldown", "EstimatedInstanceWarmup", "MetricAggregationType", "MinAdjustmentMagnitude", "PolicyType", "ScalingAdjustment", "StepAdjustments"]},
{"resource": "AWS::AutoScaling::AutoScalingGroup", "properties": ["AvailabilityZones", "Cooldown", "DesiredCapacity", "HealthCheckGracePeriod", "HealthCheckType", "InstanceId", "LaunchConfigurationName", "LoadBalancerNames", "MaxSize", "MetricsCollection", "MinSize", "NotificationConfigurations", "PlacementGroup", "Tags", "TargetGroupARNs", "TerminationPolicies", "VPCZoneIdentifier"]},
{"resource": "AWS::AutoScaling::LifecycleHook", "properties": ["AutoScalingGroupName", "DefaultResult", "HeartbeatTimeout", "LifecycleTransition", "NotificationMetadata", "NotificationTargetARN", "RoleARN"]},
{"resource": "AWS::ApplicationAutoScaling::ScalingPolicy", "properties": ["PolicyName", "PolicyType", "ResourceId", "ScalableDimension", "ServiceNamespace", "ScalingTargetId", "StepScalingPolicyConfiguration"]},
{"resource": "AWS::AutoScaling::LaunchConfiguration", "properties": ["AssociatePublicIpAddress", "BlockDeviceMappings", "ClassicLinkVPCId", "ClassicLinkVPCSecurityGroups", "EbsOptimized", "IamInstanceProfile", "ImageId", "InstanceId", "InstanceMonitoring", "InstanceType", "KernelId", "KeyName", "PlacementTenancy", "RamDiskId", "SecurityGroups", "SpotPrice", "UserData"]},
{"resource": "AWS::ApplicationAutoScaling::ScalableTarget", "properties": ["MaxCapacity", "MinCapacity", "ResourceId", "RoleARN", "ScalableDimension", "ServiceNamespace"]},
{"resource": "AWS::ApiGateway::UsagePlanKey", "properties": ["KeyId", "KeyType", "UsagePlanId"]},
{"resource": "AWS::ApiGateway::UsagePlan", "properties": ["ApiStages", "Description", "Quota", "Throttle", "UsagePlanName"]},
{"resource": "AWS::ApiGateway::Stage", "properties": ["CacheClusterEnabled", "CacheClusterSize", "ClientCertificateId", "DeploymentId", "Description", "MethodSettings", "RestApiId", "StageName", "Variables"]},
{"resource": "AWS::ApiGateway::RestApi", "properties": ["Body", "BodyS3Location", "CloneFrom", "Description", "FailOnWarnings", "Name", "Parameters", "RootResourceId"]},
{"resource": "AWS::ApiGateway::Resource", "properties": ["ParentId", "PathPart", "RestApiId"]},
{"resource": "AWS::ApiGateway::Model", "properties": ["ContentType", "Description", "Name", "RestApiId", "Schema"]},
{"resource": "AWS::ApiGateway::Method", "properties": ["ApiKeyRequired", "AuthorizationType", "AuthorizerId", "HttpMethod", "Integration", "MethodResponses", "RequestModels", "RequestParameters", "ResourceId", "RestApiId"]},
{"resource": "AWS::ApiGateway::Deployment", "properties": ["Description", "RestApiId", "StageDescription", "StageName"]},
{"resource": "AWS::ApiGateway::ClientCertificate", "properties": ["Description"]},
{"resource": "AWS::ApiGateway::BasePathMapping", "properties": ["BasePath", "DomainName", "RestApiId", "Stage"]},
{"resource": "AWS::ApiGateway::Authorizer", "properties": ["AuthorizerCredentials", "AuthorizerResultTtlInSeconds", "AuthorizerUri", "IdentitySource", "IdentityValidationExpression", "Name", "ProviderARNs", "RestApiId", "Type"]},
{"resource": "AWS::ApiGateway::ApiKey", "properties": ["Description", "Enabled", "Name", "StageKeys"]}
]